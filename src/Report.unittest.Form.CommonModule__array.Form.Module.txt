var TEST_ARRAY;

function set_up() export
    TEST_ARRAY=new Array();
    TEST_ARRAY.add(null);
    TEST_ARRAY.add(undefined);
    TEST_ARRAY.add(true);
    TEST_ARRAY.add(false);
    TEST_ARRAY.add(0);
    TEST_ARRAY.add(42);
    TEST_ARRAY.add(-3.14);
    TEST_ARRAY.add("");
    TEST_ARRAY.add("     ");
    TEST_ARRAY.add("Hello, world!");
    TEST_ARRAY.add(currentdate());
    TEST_ARRAY.add(date("00010101"));
    TEST_ARRAY.add(new Array());
    TEST_ARRAY.add(new Structure());
    TEST_ARRAY.add(new Map());
endfunction

function get_suite() export
    suite=new Array();
    suite.add("create__WithoutArguments__Pass");
    suite.add("create__WithSeveralArguments__Pass");
    suite.add("create__WithSeveralArgumentsNullMixed__Pass");
    suite.add("create__WithAll26Arguments__Pass");
    suite.add("copy");
    suite.add("count");
    //suite.add("diff");
    suite.add("freeze");
    suite.add("frozenset");
    suite.add("len");
    suite.add("merge");
    suite.add("pop__NoArgumentsToPopLastItem__Pass");
    suite.add("pop__PositiveStartPosition");
    suite.add("pop__FromPositiveStartPositionTillEnd");
    suite.add("pop__FromPositiveStartPositionTillEndOnceMore");
    suite.add("pop__NegativeStartPosition");
    suite.add("pop__FromNegativeStartPositionTillEnd");
    return suite;
endfunction

function tear_down() export
    TEST_ARRAY=undefined;
endfunction

/////////////////////////////////////////////////////////////////////////////

function create__WithOutArguments__Pass() export
    arr=array.create();
    
    assert.is_array(arr);
    assert.is_equal(arr.count(),0);
endfunction

function create__WithSeveralArguments__Pass() export
    arr=array.create(1,"abc",'20100412010101',undefined);
    
    assert.is_array(arr);
    assert.is_equal(arr.count(),4);
    assert.is_equal(arr[0],1);
    assert.is_equal(arr[1],"abc");
    assert.is_equal(arr[2],'20100412010101');
    assert.is_equal(arr[3],undefined);
endfunction

function create__WithSeveralArgumentsNullMixed__Pass() export
    arr=array.create(1,"abc",null,'20100412010101',null,undefined,
                     null,null,null,undefined);
                     
    assert.is_array(arr);
    assert.is_equal(arr.count(),5);
    assert.is_equal(arr[0],1);
    assert.is_equal(arr[1],"abc");
    assert.is_equal(arr[2],'20100412010101');
    assert.is_equal(arr[3],undefined);
    assert.is_equal(arr[4],undefined);
endfunction

function create__WithAll26Arguments__Pass() export
    arr=array.create(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    
    assert.is_array(arr);
    assert.is_equal(arr.count(),26);
    
    for i=0 to 25 do
        assert.is_equal(arr[i],0);
    enddo;
endfunction

/////////////////////////////////////////////////////////////////////////////

function copy() export
    arr=array.copy(TEST_ARRAY);
    arr_len=arr.ubound();
    
    assert(arr<>TEST_ARRAY);
    for i=0 to arr_len do
        assert.is_equal(arr[i],TEST_ARRAY[i]);
    enddo;
endfunction

/////////////////////////////////////////////////////////////////////////////

function count() export
    x=array.create(0,"ab",0,"abc",0);
    res=array.count(x,0);
    assert.is_number(res);
    assert.is_equal(res,3);
    assert.is_equal(array.count(x,"ab"),1);
    assert.is_equal(array.count(x,"abc"),1);
    assert.is_equal(array.count(x,null),0);
endfunction

/////////////////////////////////////////////////////////////////////////////

function freeze() export
    farr=array.freeze(TEST_ARRAY);
    assert.is_fixedarray(farr);
    for i=0 to TEST_ARRAY.ubound() do
        assert.is_equal(TEST_ARRAY[i],farr[i]);
    enddo;
endfunction

/////////////////////////////////////////////////////////////////////////////

function frozenset() export
    farr=array.frozenset(TEST_ARRAY);
    assert.is_fixedarray(farr);
    assert(TEST_ARRAY.ubound()=farr.ubound());
    for i=0 to TEST_ARRAY.ubound() do
        assert.is_equal(TEST_ARRAY[i],farr[i]);
    enddo;
    x=new Array();
    for i=0 to 5 do
        x.add(1);
    enddo;
    x.add(5);x.add(6);x.add(7);x.add(8);
    farr=array.frozenset(x);
    assert.is_equal(farr.count(),5);
    assert.is_equal(farr[0],1);
    assert.is_equal(farr[1],5);
    assert.is_equal(farr[2],6);
    assert.is_equal(farr[3],7);
    assert.is_equal(farr[4],8);
endfunction

/////////////////////////////////////////////////////////////////////////////

function len() export
    assert.is_equal(array.len(TEST_ARRAY),TEST_ARRAY.count());
endfunction

/////////////////////////////////////////////////////////////////////////////

function merge() export
    arr=new Array();
    for i=0 to 5 do
        arr.add(i);
    enddo;
    res=array.merge(arr,TEST_ARRAY);
    
    assert(res<>arr);
    assert(res<>TEST_ARRAY);
    assert(res.count()=TEST_ARRAY.count()+arr.count());
    
    arr_len=arr.ubound();
    testarr_len=TEST_ARRAY.ubound();
    for i=0 to arr_len do
        assert(res[i]=arr[i]);
    enddo;
    j=i;
    for i=i to testarr_len do
        assert(res[i]=TEST_ARRAY[i-j]);
    enddo;
endfunction

/////////////////////////////////////////////////////////////////////////////

function pop__NoArgumentsToPopLastItem() export
endfunction

function pop__PositiveStartPosition() export

endfunction

function pop__FromPositiveStartPositionTillEnd() export

endfunction

function pop__FromPositiveStartPositionTillEndOnceMore() export

endfunction

function pop__NegativeStartPosition() export

endfunction

function pop__FromNegativeStartPositionTillEnd() export

endfunction
