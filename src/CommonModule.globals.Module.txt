function assert(expr,msg="",env=undefined) export
    if expr then return True; endif;
    raise exception.AssertionError(msg,env);
endfunction

/////////////////////////////////////////////////////////////////////////////

//function cmp(a,b)
//    Сравнивает два значения и возвращает коэфициент их разности
//
//    Параметры:
//         a     <any> -- любое значение
//         b     <any> -- любое значение
function cmp(a,b) export
    c=new CompareValues;
    return c.compare(a,b);
endfunction

/////////////////////////////////////////////////////////////////////////////

function getattr(expr,attr,default=undefined) export
    try
        value=expr[attr];
        metainfo=metadata.findbytype(typeof(value));
        if metainfo<>undefined then
            metatype=metautils.guess_type(metainfo);
            if metatype=Constants then
                return value.get();
            endif;
        endif;
        return value;
    except
        return default;
    endtry;
endfunction

function setattr(expr,attr,value) export
    expr[attr]=value;
endfunction

function delattr(expr,attr) export
endfunction

/////////////////////////////////////////////////////////////////////////////

function noop() export
endfunction

/////////////////////////////////////////////////////////////////////////////

//function range(lbound,ubound,step=1)
//    Возвращает набор элементов с lbound по ubound с шагом step.
//
//    Параметры:
//        lbound -- начало последовательности <number>
//        ubound -- конец последовательности <number>
//          step -- шаг <number>
//
//    Возвращает:
//        <array>
//
//    Описание:
//    Возвращает массив элементов, где lbound <= arr[i] < ubound,
//    где arr[i] меняется с шагом step.
function range(lbound,ubound,step=1) export
    assert.is_number(lbound);
    assert.is_number(ubound);
    assert.is_number(step);
    res=new Array();
    walker=?(step=0,1,step);
    preq=walker>0;
    value=lbound;
    while True do
        if (preq and value>=ubound) or (not preq and value<=ubound) then
            break;
        endif;
        res.add(value);
        value=value+walker;
    enddo;
    return res;
endfunction

/////////////////////////////////////////////////////////////////////////////

// temp function
function pair(a,b) export
    arr=new Array();
    arr.add(a);
    arr.add(b);
    return arr;
endfunction

/////////////////////////////////////////////////////////////////////////////

//function repeat(item,count=1)
//    Возвращет массив элементов item, повторяющихся count раз.
//
//    Параметры:
//         item -- любое значение <any>
//        count -- число повторений <number>
//
//    Возвращает:
//        <array>
//
function repeat(item,count=1) export
    assert.is_number(count);
    assert.is_greater(count,0);
    res=new Array();
    for i=1 to count do
        res.add(item);
    enddo;
    return res;
endfunction

/////////////////////////////////////////////////////////////////////////////

function swap(a,b) export
    t=a;a=b;b=t;
endfunction