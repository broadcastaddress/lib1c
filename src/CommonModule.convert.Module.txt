//function to_array(value)
//  Конвертирует value в массив.
//
//  Параметры:
//      value <any> -- значение, которое нужно конвертировать
//
//  Возвращает:
//      <array>
//
//  Исключения:
//      TypeError -- при невозможности конвертации
//
//    Описание:
//      Правила конвертации:
//          undefined -- новый пустой массив
//             string -- массив символов строки
//              array -- без изменений
//         fixedarray -- раскрывает в array
//     structure, map -- возвращает массив массивов (key,value)
function to_array(value) export
    tval=typeof(value);
    if value=undefined then
        return new Array();
    elsif tval=type("string") then
        res=new Array();
        l=strlen(value);
        for i=1 to l do
            res.add(mid(value,i,1));
        enddo;
        return res;
    elsif tval=type("array") then
        return value;
    elsif tval=type("fixedarray") then
        res=new Array();
        for each i in value do
            res.add(i);
        enddo;
        return res;
    elsif tval=type("structure") or tval=type("map") then
        res=new Array();
        for each item in value do
            sub=new Array();
            sub.add(item.key);
            sub.add(item.value);
            res.add(sub);
        enddo;
        return res;
    else
        raise exception.TypeError(
            "Unable to convert value to array",
            new Structure("type,value",typeof(value),value)
        );
    endif;
endfunction

/////////////////////////////////////////////////////////////////////////////

//function to_boolean(value)
//  Конвертирует value в значение типа <boolean>
//
//  Параметры:
//      value <any> -- значение, которое нужно конвертировать
//
//  Возвращает:
//      <boolean>
//
//  Описание:
//      Правила конвертации:
//                   boolean -- boolean
//          metadata_objects -- если есть ссылка и она пустая, то false,
//                              во всех прочих случаях true
//                    string -- если строка нулевой длинны, то возвращается false
//                              иначе true.
//      Для всех прочих возвращается результат функции ValueIsFilled()
function to_boolean(value) export
    tval=typeof(value);
    if tval=type("boolean") then
        return value;
    elsif metadata.findbytype(tval)<>undefined then
        s=new structure("ref",null);
        FillPropertyValues(s,value);
        return ?(s.ref=null,True,not s.ref.ref.isempty());
    else
        if tval=type("string") then
            return strlen(value)>0;
        endif;
        return ValueIsFilled(value);
    endif;
endfunction

/////////////////////////////////////////////////////////////////////////////

//function to_number(value,base=10)
//  Конвертирует `value` в значение типа <number>
//  
//  Параметры:
//      value <any> -- значение, которое нужно конвертировать
//       base <number> -- система исчисления из которой нужно 
//                        конвертировать значение. Используется
//                        если `value` <string>
//
//  Возвращает:
//      <number>
//
//    Исключения:
//      TypeError -- при невозможности конвертации
//
//    Описание:
//      Правила конвертации:
//          undefined -- 0
//            boolean -- True=1,False=0
//             number -- без изменений
//             string -- перевод в число из системы base
//              array -- если `value` является бинарным массивом
//
function to_number(value,base=10) export
    tval=typeof(value);
    if value=undefined then
        return 0;
    elsif tval=type("boolean") then
        return ?(value,1,0);
    elsif tval=type("number") then
        return value;
    elsif tval=type("string") then
        if base=10 then
            try
                res=number(value);
                // 1С позволяет ковертировать пустые строки и
                // строки, состоящие из допустимных символов чиcла,
                // к 0. Не знаю, по какой логике "-"=0, но в данной
                // функции такой фокус не пройдет.
                if isblankstring(value)
                   or strlen(value)=1 and (find("-=+,.",value)>0)
                then
                   raise ""; // dummy exception
                endif;
                return res;
            except
                raise exception.ValueError(
                    "Unable to convert value to number",
                    new Structure("type,value",typeof(value),value)
                );
            endtry;
        elsif base=16 then
            return _hex2dec(value);
        elsif base=2 then
            return _bin2dec(value);
        elsif base=8 then
            //return _oct2dec(value);
        elsif base>2 then
        else
            raise exception.ValueError();
        endif;
    elsif check.is_binarr(value) then
        return _binarr2dec(value);
    else
        raise exception.TypeError(
            "Unable to convert value to number",
            new Structure("type,value",typeof(value),value)
        );
    endif;
endfunction

/////////////////////////////////////////////////////////////////////////////

//function to_string(value,in_quotes=False)
//  Конвертирует переданное значение в строку. Параметр in_quotes позволяет
//  автоматически обернуть строку в кавычки, если задан как True.
//
//    Параметры:
//          value <any>     -- значение, которое нужно конвертировать
//      in_quotes <boolean> -- оборачивать в кавычки или нет.
//
//    Возвращает:
//      <string>
//
//    Описание:
//      Данный метод работает не совсем как стандартная функция конвертации
//      string.
//      Правила конвертации:
//                    null --> "null"
//               undefined --> "undefined"
//                 boolean --> "true" или "false"
//                  number --> число отформатированное по правилу NZ=0;NDS=.;NGS=''
//                             пример:
//                             "1245123.2332"
//                  string --> без изменений
//                    date --> строка даты стандарта RFC 3339
//                             пример:
//                             "2010-04-02T10:37:10"
//                   array --> json-like массив
//                             пример:
//                             "[1,2,3,4,""5"",null]"
//                     ref --> строка UUID
//                             пример:
//                             "{4BC1AD0F-BB08-11DE-8D46-001CBF5FCF7D}"
//               structure --> json-like объект
//                     map --> json-like объект
//                             пример:
//                             "{""key1"":1,""key2"":""value"",...}"
//                    type --> представление типа, пригодное для функции type()
//                             пример:
//                             "СatalogsRef.Users" вместо "Catalogs Ref: Users"
//         metadata-object --> строка вида:
//                             <metadata_class>: <object_representation> at <object_reference>
//                             например:
//                             "Catalogs.Users: John Smith as {4BC1AD0F-BB08-11DE-8D46-001CBF5FCF7D}"
//                             "Enums.PhoneType: HTC"
//            valuestorage --> base64-encoded string
//              binarydata --> base64-encoded string
//      Для прочих значений возвращается результат стандартной функции string
function to_string(value,in_quotes=False) export
    tval=typeof(value);
    if value=null then
        return "null";
    elsif value=undefined then
        return "undefined";
    elsif tval=type("boolean") then
        return ?(value,"true","false");
    elsif tval=type("number") then
        return strreplace(string(format(value,"NZ=0;NDS=.")),chars.nbsp,"");
    elsif tval=type("string") then
        return ?(in_quotes,""""+value+"""",value);
    elsif tval=type("date") then
        return xmlstring(value);
    elsif tval=type("array") or tval=type("fixedarray") then
        str="";
        len=value.ubound();
        if len>0 then
            str=to_string(value[0],True);
            for i=1 to len do
                str=str+","+to_string(value[i],True);
            enddo;
        endif;
        return "("+str+")";
    elsif tval=type("structure") or tval=type("map") then
        str="";
        for each item in value do
            str=str+to_string(item.key,True)+":"+to_string(item.value,True)+",";
        enddo;
        return "{"+str+"}";
    elsif tval=type("type") then
        str=string(value);
        str=strreplace(str," ","");
        str=strreplace(str,":",".");
        return str;
    elsif check.is_ref(value) then 
        return xmlstring(value);
    elsif check.is_object(value) then
        info=metadata.findbytype(value);
        return info.fullname()+": "+string(value)+"";
    else
        return string(value);
    endif;
endfunction

/////////////////////////////////////////////////////////////////////////////

function expand_object(object,factory)
    metainfo=metadata.findbytype(typeof(object));
    if metainfo=undefined then
        raise exception.TypeError("metadata object expected");
    endif;
    metatype=metautils.guess_type(metainfo);
    if metatype=Constants then
        factory.insert("value",object.get());
    elsif metatype=Enums then
        factory.insert("value",string(object));
    elsif metatype=InformationRegisters or metatype=AccumulationRegisters then
        templates=undefined;
        factory.insert("linenumber",object["linenumber"]);
        factory.insert("active",object["active"]);
        factory.insert("period",object["period"]);
        factory.insert("recorder",object["recorder"]);
        factory.insert("pointintime",
                      new Structure("date,ref",
                                    object.pointintime().date,
                                    object.pointintime().ref
                      )
        );
        for each attr in metainfo.attributes do
            factory.insert(attr.name,object[attr.name]);
        enddo;
        for each attr in metainfo.resources do
            factory.insert(attr.name,object[attr.name]);
        enddo;
        for each attr in metainfo.dimensions do
            factory.insert(attr.name,object[attr.name]);
        enddo;
    else
        templates=new Structure();
        factory.insert("ref",object["ref"]);
        factory.insert("deletionmark",object["deletionmark"]);
        if metatype=Documents or metatype=Tasks then
            factory.insert("number",object["number"]);
            factory.insert("date",object["date"]);
            if metatype=Documents then
                factory.insert("posted",object["posted"]);
            else
                factory.insert("description",object["description"]);
                factory.insert("executed",object["executed"]);
            endif;
        elsif metatype=Catalogs or metatype=ChartsOfCharacteristicTypes then
            if object.predefined then
                factory.insert("name",object["name"]);
            endif;
            factory.insert("code",object["code"]);
            factory.insert("description",object["description"]);
            factory.insert("predefined",object["predefined"]);
            factory.insert("parent",object["parent"]);
            factory.insert("isfolder",object["isfolder"]);
            if metatype=Catalogs then
                factory.insert("owner",object["owner"]);
            else
                factory.insert("valuetype",object["valuetype"]);
            endif;
        endif;
        for each attr in metainfo.attributes do
            factory.insert(attr.name,object[attr.name]);
        enddo;
        for each ts in metainfo.tabularsections do
            factory.insert(ts.name,new Array());
            sect=new Structure();
            for each attr in ts.attributes do
                sect.insert(attr.name,null);
            enddo;
            execute("
            |for each row in object[ts.name] do
            |    temp=new Structure();
            |    for each item in sect do
            |       temp.insert(item.key,item.value);
            |    enddo;
            |    FillPropertyValues(temp,row);
            |    factory[ts.name].add(temp);
            |enddo;");
        enddo;
    endif;
    return factory;
endfunction

//function to_structure(object)
//  Конвертирует объект метаданных в структуру
//
//  Параметры:
//      object -- объект метаданных
//
//  Возвращает:
//      <structure>
//
//    Исключения:
//      TypeError -- если object не объект метаданных
//
function to_structure(object) export
    return expand_object(object,new structure);
endfunction

//function to_map(object)
//  Конвертирует объект метаданных в соответствие
//
//  Параметры:
//      object -- объект метаданных
//
//  Возвращает:
//      <map>
//
//    Исключения:
//      TypeError -- если object не объект метаданных
//
function to_map(object) export
    return expand_object(object,new map);
endfunction

/////////////////////////////////////////////////////////////////////////////

//function to_bin(value)
//  Возвращает представление числа value в бинарном коде
//
//    Параметры:
//        value -- число, представленное в десятичной системе как <number>,
//                 8-ричной или 16-ричной как <string> или же бинарный массив
//                 как <array>,<fixedarray>
//
//    Возвращает:
//        <string>
//
//    Исключения:
//      ValueError -- при неверном записи числа
//
//    Описание:
//      Преобразует переданное число или его представление в 8-ричной,
//      16-ричной или в качестве бинарного массива в строку формата 
//      двоичного кода.
//      Строка имеет строгий формат: ^-?0b[01]+$
//      Значение двоичного кода для отрицательных и для положительных одинаково
//      для удобства чтения и записи, т.е:
//        10 =  0b1010
//       -10 = -0b1010, хотя на самом деле -10 записывается как -0b0110
//
//      Все бинарные операции производятся через бинарные массивы, которые
//      учитывают корректность записи отрицательных чисел.
function to_bin(value) export
    if check.is_number(value) then
        return _dec2bin(value);
    elsif check.is_hex(value) then
        return _hex2bin(value);
    elsif check.is_bin(value) then
        return value;
    elsif check.is_binarr(value) then
        return _binarr2bin(value);
    else
        raise exception.ValueError();
    endif;
endfunction

/////////////////////////////////////////////////////////////////////////////

//function to_binarray(value)
//  Возвращает представление числа value в бинарном массиве
//
//    Параметры:
//        value -- число, представленное в десятичной системе как <number>,
//                 2-ичной, 8-ричной или 16-ричной как <string>
//
//    Возвращает:
//        <array>
//
//    Исключения:
//      ValueError -- при неверном записи числа
//
//    Описание:
//      Возвращает представление числа value в бинарном массиве.
//      Данный вид представление числа в двоичном коде создан с целью
//      оптимизации побитовых операций.
//      Первый элемент массива указывает на знак числа:
//           True (1) для отрицательного
//          False (0) для положительного
//      Последующие элементы массива представляют число записанное 
//      в двоичной системе в прямом коде, где True обозначает 1 и False - 0.
//      Следует помнить, что представление одного и того же числа 
//      с разным знаком различно:
//      -10=abs(-10)-1=9=01001=10110=>array(True,False,True,True,False)
//      10=01010=>array(False,True,False,True,False)
//      Дробные числа пока не поддерживаются.
//
//      Все битовые операции (AND, OR, XOR, NOT) производятся через бинарные
//      массивы, которые учитывают корректность записи отрицательных чисел.
function to_binarray(value) export
    if check.is_number(value) then
        return _dec2binarr(value);
    elsif check.is_binarr(value) then
        return value;
    elsif check.is_hex(value) then
        return _hex2binarr(value);
    elsif check.is_bin(value) then
        return _bin2binarr(value);
    elsif check.is_oct(value) then
        return _oct2binarr(value);
    else
        raise exception.ValueError();
    endif;
endfunction

/////////////////////////////////////////////////////////////////////////////

//function to_oct(value)
//  Возвращает представление числа value в восьмеричной системе
//
//    Параметры:
//        value -- число, представленное в 10-ичной системе как <number>,
//                 2-ичной, 16-ричной системах как <string> 
//                 или же бинарный массив как <array>, <fixedarray>
//
//    Возвращает:
//        <string>
//
//    Исключения:
//      ValueError -- при неверном записи числа
function to_oct(value) export
    if check.is_number(value) then
        return _dec2oct(value);
    elsif check.is_binarr(value) then
        return _binarr2oct(value);
    elsif check.is_hex(value) then
        return _hex2oct(value);
    elsif check.is_bin(value) then
        return _bin2oct(value);
    elsif check.is_oct(value) then
        return value;
    else
        raise exception.ValueError();
    endif;
endfunction

/////////////////////////////////////////////////////////////////////////////

//function to_dec(value)
//    Возвращает представление числа value в десятичной системе
//
//    Параметры:
//        value -- число, представленное в 2-ичной, 8-ричной или 16-ричной 
//                 системах как <string> или же бинарный массив как <array>,
//                 <fixedarray>
//
//    Возвращает:
//        <number>
//
//    Описание:
//    Преобразует переданное число из 2-ичной, 8-ричной, 16-ричной системах или
//    из бинарного массива в число десятичной системы исчисления.
function to_dec(value) export
    if check.is_number(value) then
        return value;
    elsif check.is_binarr(value) then
        return _binarr2dec(value);
    elsif check.is_hex(value) then
        return _hex2dec(value);
    elsif check.is_bin(value) then
        return _bin2dec(value);
    elsif check.is_oct(value) then
        //return _oct2dec(value);
    else
        raise exception.ValueError();
    endif;
endfunction

/////////////////////////////////////////////////////////////////////////////

//function to_dec(value)
//  Возвращает представление числа value в десятичной системе
//
//    Параметры:
//        value -- число, представленное в 2-ичной, 8-ричной или 16-ричной 
//                 системах как <string> или же бинарный массив как <array>,
//                 <fixedarray>
//
//    Возвращает:
//        <string>
//
//    Описание:
//      Преобразует переданное число из 2-ичной, 8-ричной, 16-ричной системах или
//      из бинарного массива в число десятичной системы исчисления.
function to_hex(value,prefix="0x") export
    if check.is_number(value) then
        return _dec2hex(value,prefix);
    elsif check.is_binarr(value) then
        return _binarr2hex(value,prefix);
    elsif check.is_hex(value) then
        return value;
    elsif check.is_bin(value) then
        return _bin2hex(value,prefix);
    elsif check.is_oct(value) then
        return _oct2hex(value,prefix);
    else
        raise exception.ValueError();
    endif;
endfunction

/////////////////////////////////////////////////////////////////////////////
// Вспомогательные методы
/////////////////////////////////////////////////////////////////////////////

function _binarr2bin(binarr)
    res=?(binarr[0],"-","")+"0b";
    l=binarr.ubound();
    if l=0 then
        return "0b0";
    endif;
    if binarr[0] then
        for i=0 to l do
            binarr[i]=not binarr[i];
        enddo;
        binarr[l]=not binarr[l];
        while not binarr[l] do
            l=l-1;
            binarr[l]=not binarr[l];
        enddo;
    endif;
    start=binarr.find(not binarr[0]);
    if start<>undefined then
        for i=start to l do
            res=res+string(int(binarr[i]));
        enddo;
    endif;
    return res;
endfunction

function _oct2bin(value)
    res="";
    is_neg=mid(value,1,1)="-";
    sign=?(is_neg,"-","");
    octstr="01234567";
    binstr="000001010011100101110111";
    l=strlen(value);
    for i=?(is_neg,4,3) to l do
        res=res+mid(binstr,3*find(octstr,mid(value,i,1))-2,3);
    enddo;
    return sign+"0b"+mid(res,find(res,"1"));
endfunction

function _dec2bin(value)
    res=0;base=0;
    sign=?(value<0,"-","");
    value=?(value>0,value,value*-1);
    while value>0 do
        res=res+?(value%2=1,pow(10,base),0);
        base=base+1;
        value=int(value/2);
    enddo;
    res=strreplace(string(format(res,"NZ=0;NDS=.")),chars.nbsp,"");
    return sign+"0b"+res;
endfunction

function _hex2bin(val value)
    res="";
    value=upper(value);
    is_neg=mid(value,1,1)="-";
    sign=?(is_neg,"-","");
    hexstr="0123456789ABCDEF";
    binstr="0000000100100011010001010110011110001001101010111100110111101111";
    l=strlen(value);
    for i=?(is_neg,4,3) to l do
        res=res+mid(binstr,4*find(hexstr,mid(value,i,1))-3,4);
    enddo;
    return sign+"0b"+mid(res,find(res,"1"));
endfunction

/////////////////////////////////////////////////////////////////////////////

function _bin2binarr(value)
    res=new Array();
    l=strlen(value);
    is_neg=mid(value,1,1)="-";
    res.add(is_neg);
    start=find(value,"1");
    execute("
    |for i=?(start=0,l+1,start) to l do
    |    res.add(?(is_neg,not boolean(int(mid(value,i,1))),boolean(int(mid(value,i,1)))));
    |enddo;");
    if is_neg then
        l=res.ubound();
        if l=0 then
            return res;
        endif;
        while True do
            res[l]=not res[l];
            if res[l] then
                break;
            endif;
            l=l-1;
        enddo;
    endif;
    return res;
endfunction

function _dec2binarr(value)
    return _bin2binarr(_dec2bin(value));
endfunction

function _oct2binarr(value)
    return _bin2binarr(_oct2bin(value));
endfunction

function _hex2binarr(value)
    return _bin2binarr(_hex2bin(value));
endfunction

/////////////////////////////////////////////////////////////////////////////

function _bin2dec(value)
    res=0;
    sign=?(mid(value,1,1)="-",-1,1);
    l=strlen(value);
    for i=?(sign=-1,4,3) to l do
        if mid(value,i,1)<>"0" then
            res=res+pow(2,l-i);
        endif;
    enddo;
    return sign*res;
endfunction

function _binarr2dec(val value)
    res=0;l=value.ubound();
    for i=1 to l do
        if value[0]<>value[i] then
            res=res+pow(2,l-i);
        endif;
    enddo;
    return ?(value[0],-1*res-1,res);
endfunction

function _hex2dec(val value,prefix="0x")
    res=0;
    value=upper(value);
    hexstr="0123456789ABCDEF";
    l=strlen(value);
    for s=strlen(prefix)+1 to l do
        if mid(value,s,1)<>"0" then
            break;
        endif;
    enddo;
    for i=s to l do
        res=res+(find(hexstr,mid(value,i,1))-1)*pow(16,l-i);
    enddo;
    return res;
endfunction

/////////////////////////////////////////////////////////////////////////////

function _bin2hex(val value,prefix="0x")
    res="";
    is_neg=mid(value,1,1)="-";
    hexstr="0123456789ABCDEF";
    binstr="|0000|0001|0010|0011|0100|0101|0110|0111|1000|1001|1010|1011|1100|1101|1110|1111";
    value=mid(value,?(is_neg,4,3));
    l=strlen(value);
    i=l%4;
    if i<>0 then
        for j=i to 3 do
            value="0"+value;
        enddo;
        l=strlen(value);
    endif;
    l=l/4-1;
    for i=0 to l do
        p=find(binstr,"|"+mid(value,1+i*4,4));
        p=p-p/5;
        res=res+mid(hexstr,(p/4)+1,1);
    enddo;
    return ?(is_neg,"-","")+prefix+res;
endfunction

function _binarr2hex(val value,prefix="0x")
    return _bin2hex(_binarr2bin(value),prefix);
endfunction

function _oct2hex(val value,prefix="0x")
    raise exception.NotImplementedError();
endfunction

function _dec2hex(val value,prefix="0x")
    res="";
    sign=?(value<0,"-","");
    hexstr="0123456789ABCDEF";
    value=?(value>0,value,-value);
    while value>0 do
        res=mid(hexstr,1+(value-16*int(value/16)),1)+res;
        value=int(value/16);
    enddo;
    res=strreplace(string(format(res,"NZ=0;NGS=''")),chars.nbsp,"");
    return sign+prefix+res;
endfunction

/////////////////////////////////////////////////////////////////////////////
// TODO

function _bin2oct(val value)
    return _dec2oct(_bin2dec(value));
endfunction

function _binarr2oct(val value)
    return _dec2oct(_binarr2dec(value));
endfunction

function _hex2oct(val value)
    return _dec2oct(_hex2dec(value));
endfunction

function _dec2oct(val value)
    raise exception.NotImplementedError();
endfunction