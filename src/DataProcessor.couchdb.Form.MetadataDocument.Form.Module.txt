var _data;
var _schema;
var _metainfo;
var _metatype;

function _set_schema(schema)
    _schema=new map();
    if check.is_structure_or_map(schema) then
        for each item in schema do
            assert.is_string(item.key,"couchdb.Document","string key required");
            _schema.insert(item.key,null);
        enddo;
    elsif check.metadata_contains(schema) then
        metainfo=?(typeof(schema)=type("metadataobject"),
                   schema,
                   metadata.findbytype(typeof(schema)));
        if metainfo<>_metainfo then
            raise exception.TypeError("Invalid schema description");
        endif;
        _schema.insert(".class",null);
        _schema.insert(".fullname",null);
        _schema.insert(".metaclass",null);
        // who knows better way?
        tschema=metautils.guess_type(metainfo);
        if tschema=Constants or tschema=Enums then
            _schema.insert("value",null);
        elsif tschema=Catalogs or tschema=ChartsOfCharacteristicTypes
            or tschema=Documents or tschema=Tasks then
            _schema.insert("ref",null);
            _schema.insert("deletionmark",null);
            if tschema=Catalogs or tschema=ChartsOfCharacteristicTypes then
                _schema.insert("name",null);
                _schema.insert("code",null);
                _schema.insert("description",null);
                _schema.insert("predefined",null);
                _schema.insert("parent",null);
                _schema.insert("isfolder",null);
            endif;
            if tschema=Catalogs then
                _schema.insert("owner",null);
            endif;
            if tschema=ChartsOfCharacteristicTypes then
                _schema.insert("valuetype",null);
            endif;
            if tschema=Documents then
                _schema.insert("number",null);
                _schema.insert("posted",null);
                _schema.insert("date",null);
            endif;
            if tschema=Tasks then
                _schema.insert("date",null);
                _schema.insert("executed",null);
                _schema.insert("number",null);
            endif;
            for each attr in metainfo.attributes do
                _schema.insert(attr.name,null);
            enddo;
            for each ts in metainfo.tabularsections do
                _schema.insert(ts.name,new Array());
            enddo;
        else
            _schema.insert("active",null);
            _schema.insert("linenumber",null);
            _schema.insert("period",null);
            _schema.insert("recorder",null);
            for each attr in metainfo.attributes do
                _schema.insert(attr.name,null);
            enddo;
            for each attr in metainfo.resources do
                _schema.insert(attr.name,null);
            enddo;
            for each attr in metainfo.dimensions do
                _schema.insert(attr.name,null);
            enddo;
        endif;
    else
        raise exception.TypeError();
    endif;
    return thisform;
endfunction

function init(data=undefined,schema=undefined) export
    _schema=undefined;
    _metainfo=undefined;
    _data=new map();
    if schema<>undefined then
        _set_schema(schema);
    endif;
    if data<>undefined and check.metadata_contains(data) then
        metainfo=metadata.findbytype(typeof(data));
        if _metainfo<>undefined and metainfo<>_metainfo then
            raise exception.ValueError();
        endif;
        _metainfo=metainfo;
        thisform.update(data);
        thisform.set("_id",genid(data));
        thisform.set(".class",metainfo.name);
        thisform.set(".fullname",metainfo.fullname());
        thisform.set(".metaclass",string.split(metainfo.fullname(),".")[0]);
    else
        raise exception.ValueError();
    endif;
    return thisform;
endfunction

function dispatch() export
    return _data;
endfunction

function get(k) export
    return _data[k];
endfunction

function set(k,v) export
    _data[k]=v;
    return thisform;
endfunction

function del(k) export
    _data.delete(k);
    return thisform;
endfunction

function has(k) export
    return check.hasattr(_data,k);
endfunction

function genid(expr)
    return metautils.get_uuid(expr);
endfunction

function update(expr) export
    if check.metadata_contains(expr) then
        data=convert.to_structure(expr);
    elsif check.is_structure_or_map(expr) then
        data=expr;
    else
        raise exception.TypeError();
    endif;
    for each item in data do
        if _schema<>undefined then
            if _schema.get(item.key)=null then
                thisform.set(item.key,item.value);
            endif;
        else
            thisform.set(item.key,item.value);
        endif;
    enddo;
    return thisform;
endfunction