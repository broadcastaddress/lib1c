var result export;
var values export;

function test_info()
    res=new Structure();
    res.insert("name","");
    res.insert("behavior","");
    res.insert("result","");
    return res;
endfunction

function split_test_name(s)
    res=new Structure("name,descr,behavior","","","");
    p=find(s,"__");
    res.name=mid(s,1,p-1);
    i=strlen(s);
    while mid(s,i,1)<>"_" and mid(s,i-1,1)<>"_" and i<>0 do
        i=i-1;
    enddo;
    if i<>0 then
        descr=mid(s,p+2,i-p-4);
        behavior=mid(s,i);
        if descr=behavior then
            behavior="";
        endif;
        res.descr=descr;
        res.behavior=behavior;
    endif;
    return res;
endfunction

function set_up(form)
    try
        res=form.set_up();
    except
        if find(errorinfo().description,"(set_up)")=0 then
            raise;
        endif;
    endtry;
    return res;
endfunction

function run_test(form,fname,args=undefined,val behavior)
    lobehavior=lower(behavior);
    try
        execute("form."+fname+?(args=undefined,"()","(args)"));
    except
        err=exception.catch(errorinfo());
        if find(lobehavior,"fail")<>0 then
            return undefined;
        endif;
        if find(lobehavior,"exception")<>0 or find(lobehavior,"error")<>0 then
            assert(lower(err.type)=lobehavior,"Occured exception is not expected one",
                                            new Structure("occured,expected",err.type,behavior));
            return undefined;
        endif;
        raise exception.throw();
    endtry;
    if find(lobehavior,"fail")<>0 
        or find(lobehavior,"exception")<>0 
        or find(lobehavior,"error")<>0 then
        assert(false,"Exception expected during this test",
                     new Structure("fname,args,behavior",fname,args,behavior));
    endif;
endfunction

function tear_down(form)
    try
        form.tear_down();
    except
        if find(errorinfo().description,"(tear_down)")=0 then
           raise;
        endif;
    endtry;
endfunction

function run() export
    res=new array();
    for each module in metadata.reports.unittest.forms do
        current_test=test_info();
        current_test.name=module.name;
        current_test.insert("tests",new structure());
        form=thisobject.getform(module.name);
        try
            suite=form.get_suite();
        except
            current_test.result=result.FAILED;
            current_test.insert("error",errorinfo().Description);
            continue;
        endtry;
        for each fname in suite do
            exception.clear();
            test=test_info();
            funcinfo=split_test_name(fname);
            test.name=funcinfo.name;
            test.behavior=funcinfo.behavior;
            try
                //
                args=set_up(form);
                //
                run_test(form,fname,args,funcinfo.behavior);
                //
                tear_down(form);
                //
                test.result=result.PASSED;
            except
                test.insert("error",errorinfo().Description);
                test.result=result.FAILED;
            endtry;
            if current_test.tests.property(funcinfo.name) then
                test.name=funcinfo.descr;
                if current_test.tests[funcinfo.name].property("tests") then
                    current_test.tests[funcinfo.name].tests.add(test)
                else
                    prev_test=current_test.tests[funcinfo.name];
                    current_test.tests[funcinfo.name]=test_info();
                    current_test.tests[funcinfo.name].name=funcinfo.name;
                    current_test.tests[funcinfo.name].insert("tests",new array());
                    current_test.tests[funcinfo.name].tests.add(prev_test);
                    current_test.tests[funcinfo.name].tests.add(test);
                endif;
            else
                if funcinfo.descr="" then
                    current_test.tests.insert(funcinfo.name,test);
                else
                    current_test.tests.insert(funcinfo.name,test_info());
                    current_test.tests[funcinfo.name].name=funcinfo.name;
                    current_test.tests[funcinfo.name].insert("tests",new array());
                    test.name=funcinfo.descr;
                    current_test.tests[funcinfo.name].tests.add(test);
                endif;
            endif;
        enddo;
        res.add(current_test);
    enddo;
    return res;
endfunction

result=new Structure("PASSED,FAILED,UNKNOWN","PASSED","FAILED","UNKNOWN");

values=new Structure();
    values.insert("null",null);
    values.insert("undefined",undefined);
    values.insert("booleans",new Structure);
    values.booleans.insert("true",true);
    values.booleans.insert("false",false);
    values.insert("numbers",new Structure);
    values.numbers.insert("zero",0);
    values.numbers.insert("integer",1234567890);
    values.numbers.insert("real",-987654.0321);
    values.numbers.insert("answer",42);
    values.numbers.insert("over9k",90000000000000000000000000.00000000000000000000000009);
    values.insert("strings",new Structure);
    values.strings.insert("empty","");
    values.strings.insert("spaced","          s"+chars.cr+"p"+chars.cr+"a"+chars.cr+"c"+chars.cr+"e"+chars.cr+"d           ");
    values.strings.insert("all"," abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZАБВСГЕЁЗЖИКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгеёжзийклмнопрстуфхцчшщъыьэюя1234567890~!@#$%^&*()_+,./;'\[]{}:""|<?>"+chars.cr+chars.ff+chars.tab+chars.nbsp+chars.lf+chars.vtab);
    values.strings.insert("en_alpha_lcase","abcdefghijklmnopqrstuvwyz");
    values.strings.insert("en_ALPHA_UCASE","ABCDEFGHIJKLMNOPQRSTUVWYZ");
    values.strings.insert("ru_alpha_lcase","абвгеёжзийклмнопрстуфхцчшщъыьэюя");
    values.strings.insert("ru_ALPHA_UCASE","АБВСГЕЁЗЖИКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ");
    values.strings.insert("digits","1234567890");
    values.strings.insert("digits2","-987654.0321");
    values.strings.insert("spec_chars","~!@#$%^&*()_+,./;'\[]{}:""|<?>");
    values.strings.insert("spec_chars2",chars.cr+chars.ff+chars.tab+chars.nbsp+chars.lf+chars.vtab);
    values.strings.insert("date","06.06.1234 11:12:13");
    values.strings.insert("date2",string(currentdate()));
    values.strings.insert("uuid",string(new uuid()));
    values.strings.insert("quotes","""""""""""""Quote hell""""""""""""""");
    values.strings.insert("moo"," ^__^
                              |   (oo)\_______
                              |   (__)\       )\/\
                              |       ||----w |
                              |       ||     ||
                              |");
    values.insert("dates",new Structure());
    values.dates.insert("currentdate",currentdate());
    values.dates.insert("thebegining",'00010101');
    values.insert("arrays",new Structure());
    arr=new Array();
    for i=0 to 100 do
        arr.add(?(i%2=0,i,-i)/2);
    enddo;
    values.arrays.insert("numeric",arr);
    values.insert("fixedarrays",new Structure());
    values.fixedarrays.insert("numeric",new FixedArray(values.arrays.numeric));