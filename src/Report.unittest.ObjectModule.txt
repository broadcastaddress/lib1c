//RESULT <structure>
//  Результат выполнения теста.
//  Содержит поля:
//      PASSED <string> -- признак успешного выполнения теста
//      FAILED <string> -- признак провального выполнения теста
//      UNKNOWN <string> -- тест не выполнялся/результат неизвестен
var RESULT export;

//BEHAVIOR <structure>
//  Предопределенные поведения тестов.
//  Содержит поля:
//      FAIL <array> -- поведения абсолютного провала
//      PASS <array> -- поведения абсолютного успеха
var BEHAVIOR export;

//function _split(val s,sep,count=0)
//  Разбивает строку `s` по разделителю `sep` `count` число раз
//
//  Параметры:
//          s <string> -- исходная строка
//        sep <string> -- разделитель
//      count <number> -- количество частей.
//
//  Возвращает:
//      <array>
//
//  Описание:
//      Функция является реализацией канонического строкового метода split.
//      Если `count`<=0, то будет выполнено максимально возможное количество
//      делений строки `s`.
//      Если `count`>0, то будет возвращем массив, состоящий 
//      максимум из `count` элементов.
//
//  P.S. функция является копией string.split, дабы снять внешнюю зависимость
//
function _split(val s,sep,count=0)
    if count<0 then
        count=0;
    endif;
    stack=new Array();
    seplen=strlen(sep);
    while True do
        bay=find(s,sep);
        if bay=0 then
            break;
        endif;
        stack.add(mid(s,1,bay-1));
        s=mid(s,bay+seplen);
        if count<>0 and stack.count()=count then
            break;
        endif;
    enddo;
    stack.add(s);
    return stack;
endfunction

//function TestInfo(funcname)
//  Формирует стуктуру на основе имени теста `funcname`
//
//  Параметры:
//      funcname <string> -- имя функции теста
//
//  Возвращает:
//      <structure:[
//              name <string> -- имя тестируемой функции,
//             descr <array>  -- описание теста,
//          behavior <string> -- поведение теста,
//            result <string> -- конечный результат
//      ]>
//
function TestInfo(funcname)
    res=new Structure();
    res.insert("name","");
    res.insert("descr",new Array());
    res.insert("behavior","");
    res.insert("result","");
    parts=_split(funcname,"__");
    res.name=parts[0];
    parts.delete(0);
    if parts.count()<>0 then
        res.descr.add(parts[0]);
        parts.delete(0);
    endif;
    if parts.count()<>0 then
        res.behavior=parts[parts.ubound()];
        parts.delete(parts.ubound());
    endif;
    for each item in parts do
        res.descr.add(item);
    enddo;
    return res;
endfunction

function set_up(unit)
    try
        res=unit.set_up();
    except
        // есть ли более удачный вариант проверить, что такой метод
        // не существует?
        if find(errorinfo().description,"(set_up)")=0 then
            raise;
        endif;
    endtry;
    return res;
endfunction

function exec(unit,fname,args,testinfo)
    try
        execute("unit."+fname+?(args=undefined,"()","(args)"));
    except
        err=exception.catch(errorinfo());
        if BEHAVIOR.FAIL.find(lower(testinfo.behavior))<>undefined then
            return undefined;
        endif;
        if behavior="" then
            raise exception.throw();
        endif;
        if lower(err.type)<>lower(testinfo.behavior) then
            env=new Structure("occured,expected,traceback",
                               err.type,testinfo.behavior,exception.throw());
            msg="Occured exception is not expected one";
            raise exception.BaseException("AssertError",msg,env);
        endif;
        return undefined;
    endtry;
    if BEHAVIOR.PASS.find(lower(testinfo.behavior))=undefined then
        msg="Exception expected during this test";
        env=new Structure("fname,args,behavior",fname,args,testinfo.behavior);
        raise exception.BaseException("AssertError",msg,env);
    endif;
endfunction

function run_test(unit,funcname) export
    exception.clear();
    test=TestInfo(funcname);
    try
        args=set_up(unit);
        exec(unit,funcname,args,test);
        tear_down(unit);
        test.result=RESULT.PASSED;
    except
        test.insert("error",errorinfo().Description);
        test.result=RESULT.FAILED;
    endtry;
    return test;
endfunction

function tear_down(unit)
    try
        unit.tear_down();
    except
        // есть ли более удачный вариант проверить, что такой метод
        // не существует?
        if find(errorinfo().description,"(tear_down)")=0 then
           raise;
        endif;
    endtry;
endfunction

function units() export
    units=new structure();
    for each unit in metadata.reports.unittest.forms do
        try
            form=thisobject.getform(unit.name);
            res=form.get_suite();
            assert.is_array(res);
            units.insert(unit.name,form);
        except
            continue;
        endtry;
    enddo;
    return units;
endfunction

function run_unit(unit) export
    return run_suite(unit,unit.get_suite());
endfunction

function run_suite(unit,suite)
    res=new array();
    for each funcname in suite do
        res.add(run_test(unit,funcname));
    enddo;
    return res;
endfunction


RESULT=new Structure("PASSED,FAILED,UNKNOWN","PASSED","FAILED","UNKNOWN");
//
BEHAVIOR=new Structure();
BEHAVIOR.insert("FAIL",new Array());
BEHAVIOR.FAIL.add("fail");
BEHAVIOR.FAIL.add("failed");
BEHAVIOR.FAIL.add("error");
BEHAVIOR.insert("PASS",new Array());
BEHAVIOR.PASS.add("");
BEHAVIOR.PASS.add("ok");
BEHAVIOR.PASS.add("pass");
BEHAVIOR.PASS.add("passed");
BEHAVIOR.PASS.add("success");